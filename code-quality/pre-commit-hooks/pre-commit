#!/bin/bash

# Pre-commit hook for Kubernetes Baremetal Lab
# Pre-commit хук для Kubernetes Baremetal Lab

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}[PRE-COMMIT] ${message}${NC}"
}

# Function to check YAML syntax
check_yaml_syntax() {
    local files=$1
    local has_errors=false
    
    for file in $files; do
        if [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]]; then
            if command -v yamllint &> /dev/null; then
                if ! yamllint "$file" &> /dev/null; then
                    print_status "$RED" "YAML syntax error in $file"
                    has_errors=true
                else
                    print_status "$GREEN" "✓ YAML syntax OK: $file"
                fi
            else
                # Basic YAML check with Python
                if python3 -c "import yaml; yaml.safe_load(open('$file'))" &> /dev/null; then
                    print_status "$GREEN" "✓ YAML syntax OK: $file"
                else
                    print_status "$RED" "YAML syntax error in $file"
                    has_errors=true
                fi
            fi
        fi
    done
    
    return $([ "$has_errors" = true ] && echo 1 || echo 0)
}

# Function to check Kubernetes manifests
check_k8s_manifests() {
    local files=$1
    local has_errors=false
    
    for file in $files; do
        if [[ "$file" == *.yaml ]] || [[ "$file" == *.yml ]]; then
            if command -v kubectl &> /dev/null; then
                if kubectl apply --dry-run=client -f "$file" &> /dev/null; then
                    print_status "$GREEN" "✓ K8s manifest OK: $file"
                else
                    print_status "$RED" "K8s manifest error in $file"
                    has_errors=true
                fi
            else
                print_status "$YELLOW" "⚠ kubectl not available, skipping K8s validation: $file"
            fi
        fi
    done
    
    return $([ "$has_errors" = true ] && echo 1 || echo 0)
}

# Function to check shell scripts
check_shell_scripts() {
    local files=$1
    local has_errors=false
    
    for file in $files; do
        if [[ "$file" == *.sh ]]; then
            if command -v shellcheck &> /dev/null; then
                if shellcheck "$file" &> /dev/null; then
                    print_status "$GREEN" "✓ Shell script OK: $file"
                else
                    print_status "$RED" "Shell script error in $file"
                    has_errors=true
                fi
            else
                # Basic bash syntax check
                if bash -n "$file" &> /dev/null; then
                    print_status "$GREEN" "✓ Shell script syntax OK: $file"
                else
                    print_status "$RED" "Shell script syntax error in $file"
                    has_errors=true
                fi
            fi
        fi
    done
    
    return $([ "$has_errors" = true ] && echo 1 || echo 0)
}

# Function to check Terraform files
check_terraform_files() {
    local files=$1
    local has_errors=false
    
    for file in $files; do
        if [[ "$file" == *.tf ]]; then
            if command -v terraform &> /dev/null; then
                # Change to directory containing the file
                local dir=$(dirname "$file")
                if [ -d "$dir" ]; then
                    cd "$dir"
                    if terraform validate &> /dev/null; then
                        print_status "$GREEN" "✓ Terraform OK: $file"
                    else
                        print_status "$RED" "Terraform error in $file"
                        has_errors=true
                    fi
                    cd - > /dev/null
                fi
            else
                print_status "$YELLOW" "⚠ terraform not available, skipping validation: $file"
            fi
        fi
    done
    
    return $([ "$has_errors" = true ] && echo 1 || echo 0)
}

# Function to check for sensitive data
check_sensitive_data() {
    local files=$1
    local has_errors=false
    
    for file in $files; do
        # Check for hardcoded passwords, keys, etc.
        if grep -q -i "password.*=.*['\"][^'\"]*['\"]" "$file" 2>/dev/null; then
            print_status "$RED" "Potential hardcoded password in $file"
            has_errors=true
        fi
        
        if grep -q -i "secret.*=.*['\"][^'\"]*['\"]" "$file" 2>/dev/null; then
            print_status "$RED" "Potential hardcoded secret in $file"
            has_errors=true
        fi
        
        if grep -q -i "key.*=.*['\"][^'\"]*['\"]" "$file" 2>/dev/null; then
            print_status "$RED" "Potential hardcoded key in $file"
            has_errors=true
        fi
    done
    
    return $([ "$has_errors" = true ] && echo 1 || echo 0)
}

# Function to check file permissions
check_file_permissions() {
    local files=$1
    local has_errors=false
    
    for file in $files; do
        if [[ "$file" == *.sh ]]; then
            if [ ! -x "$file" ]; then
                print_status "$YELLOW" "⚠ Making shell script executable: $file"
                chmod +x "$file"
            fi
        fi
    done
    
    return 0
}

# Main pre-commit function
main() {
    print_status "$BLUE" "Running pre-commit checks..."
    
    # Get staged files
    local staged_files=$(git diff --cached --name-only --diff-filter=ACM)
    
    if [ -z "$staged_files" ]; then
        print_status "$GREEN" "No files to check"
        exit 0
    fi
    
    local has_errors=false
    
    # Check YAML syntax
    if ! check_yaml_syntax "$staged_files"; then
        has_errors=true
    fi
    
    # Check Kubernetes manifests
    if ! check_k8s_manifests "$staged_files"; then
        has_errors=true
    fi
    
    # Check shell scripts
    if ! check_shell_scripts "$staged_files"; then
        has_errors=true
    fi
    
    # Check Terraform files
    if ! check_terraform_files "$staged_files"; then
        has_errors=true
    fi
    
    # Check for sensitive data
    if ! check_sensitive_data "$staged_files"; then
        has_errors=true
    fi
    
    # Check file permissions
    check_file_permissions "$staged_files"
    
    if [ "$has_errors" = true ]; then
        print_status "$RED" "Pre-commit checks failed. Please fix the issues above."
        exit 1
    else
        print_status "$GREEN" "All pre-commit checks passed!"
        exit 0
    fi
}

# Run main function
main "$@" 