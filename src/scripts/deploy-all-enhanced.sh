#!/bin/bash

# Enhanced Complete Deployment Script for All Components
# Includes basic infrastructure, monitoring, lab stands, and security

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Check for required tools
check_prerequisites() {
    log_info "Checking required tools..."
    
    local tools=("kubectl" "helm" "terraform" "ansible")
    local missing_tools=()
    
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        log_error "Missing tools: ${missing_tools[*]}"
        log_info "Please install missing tools and try again."
        exit 1
    fi
    
    log_info "All required tools found"
}

# Check cluster connectivity
check_cluster() {
    log_info "Checking Kubernetes cluster connectivity..."
    
    if ! kubectl cluster-info &> /dev/null; then
        log_error "Cannot connect to Kubernetes cluster. Please check configuration."
        exit 1
    fi
    
    local cluster_info
    cluster_info=$(kubectl cluster-info | head -n 1)
    log_info "Cluster connection established: $cluster_info"
}

# Create base namespaces
create_namespaces() {
    log_step "Creating base namespaces..."
    
    local namespaces=("monitoring" "lab-stands" "gitops" "jenkins" "storage")
    
    for ns in "${namespaces[@]}"; do
        log_info "Creating namespace: $ns"
        kubectl create namespace "$ns" --dry-run=client -o yaml | kubectl apply -f -
    done
    
    log_info "All namespaces created successfully"
}

# Deploy basic infrastructure
deploy_base_infrastructure() {
    log_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
    
    # Apply basic configurations
    log_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    kubectl apply -f src/kubernetes/namespaces/all-namespaces.yaml
    kubectl apply -f src/kubernetes/storage/storage-classes.yaml
    kubectl apply -f src/kubernetes/network/metallb-config.yaml
    
    # Deploy Ingress Controller
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Ingress Controller..."
    kubectl apply -f src/kubernetes/ingress/nginx-ingress.yaml
    
    # Wait for Ingress Controller readiness
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ingress-nginx -n ingress-nginx --timeout=300s
    
    log_info "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ —É—Å–ø–µ—à–Ω–æ"
}

# Deploy monitoring system
deploy_monitoring() {
    log_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    # Run monitoring deployment script
    if [ -f "src/scripts/deploy-monitoring.sh" ]; then
        log_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
        ./src/scripts/deploy-monitoring.sh
    else
        log_warn "–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
    fi
}

# Deploy lab environments
deploy_lab_stands() {
    log_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤..."
    
    # Run lab environments deployment script
    if [ -f "src/scripts/deploy-lab-stands.sh" ]; then
        log_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤..."
        ./src/scripts/deploy-lab-stands.sh
    else
        log_warn "–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Å—Ç–µ–Ω–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
    fi
}

# Deploy security components
deploy_security() {
    log_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    
    # Run security deployment script
    if [ -f "src/scripts/deploy-security.sh" ]; then
        log_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
        ./src/scripts/deploy-security.sh
    else
        log_warn "–°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º..."
    fi
}

# Deploy GitOps components
deploy_gitops() {
    log_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ GitOps –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
    
    # Deploy ArgoCD
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ ArgoCD..."
    kubectl apply -f src/kubernetes/gitops/argocd/argocd-install.yaml
    
    # Wait for ArgoCD readiness
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
    
    # Deploy Flux (optional)
    if [ -f "src/kubernetes/gitops/flux/flux-install.yaml" ]; then
        log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Flux..."
        kubectl apply -f src/kubernetes/gitops/flux/flux-install.yaml
    fi
    
    log_info "GitOps –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã —É—Å–ø–µ—à–Ω–æ"
}

# Deploy CI/CD components
deploy_cicd() {
    log_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ CI/CD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
    
    # Deploy Jenkins
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Jenkins..."
    kubectl apply -f src/kubernetes/jenkins/jenkins-deployment.yaml
    
    # Wait for Jenkins readiness
    kubectl wait --for=condition=ready pod -l app=jenkins -n jenkins --timeout=300s
    
    # Deploy Tekton (optional)
    if [ -f "src/kubernetes/tekton/tekton-install.yaml" ]; then
        log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Tekton..."
        kubectl apply -f src/kubernetes/tekton/tekton-install.yaml
    fi
    
    log_info "CI/CD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã —É—Å–ø–µ—à–Ω–æ"
}

# Check deployment status
check_deployment_status() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    echo -e "\n=== –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö namespace'–æ–≤ ==="
    kubectl get namespaces
    
    echo -e "\n=== –°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤ –ø–æ namespace'–∞–º ==="
    local namespaces=("monitoring" "lab-stands" "gitops" "jenkins" "argocd" "ingress-nginx")
    
    for ns in "${namespaces[@]}"; do
        if kubectl get namespace "$ns" &> /dev/null; then
            echo "--- $ns ---"
            kubectl get pods -n "$ns" --no-headers | head -5
        fi
    done
    
    echo -e "\n=== –°–µ—Ä–≤–∏—Å—ã ==="
    kubectl get services --all-namespaces | head -10
    
    echo -e "\n=== Ingress ==="
    kubectl get ingress --all-namespaces
}

# Create deployment report
create_deployment_report() {
    log_step "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏..."
    
    local report_file
    report_file="deployment-report-$(date +%Y%m%d-%H%M%S).txt"
    
    {
        echo "–û—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ k8s-lab-baremetal-architecture"
        echo "–î–∞—Ç–∞: $(date)"
        echo "=================================================="
        echo ""
        echo "–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
        kubectl get pods --all-namespaces --field-selector=status.phase!=Running
        echo ""
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        echo "- Prometheus: http://prometheus.k8s-lab.local"
        echo "- Grafana: http://grafana.k8s-lab.local (admin/admin123)"
        echo "- Alertmanager: http://alertmanager.k8s-lab.local"
        echo "- Kibana: http://kibana.k8s-lab.local"
        echo "- Jenkins: http://jenkins.k8s-lab.local"
        echo "- ArgoCD: http://argocd.k8s-lab.local"
        echo "- Nginx Example: http://nginx-example.k8s-lab.local"
        echo "- Node.js App: http://nodejs-app.k8s-lab.local"
        echo "- Flask App: http://flask-app.k8s-lab.local"
        echo "- PgAdmin: http://pgadmin.k8s-lab.local (admin@example.com/admin123)"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:"
        echo "- kubectl get pods --all-namespaces"
        echo "- kubectl get services --all-namespaces"
        echo "- kubectl get ingress --all-namespaces"
        echo "- kubectl get networkpolicies --all-namespaces"
    } > "$report_file"
    
    log_info "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: $report_file"
}

# Error cleanup function
cleanup_on_error() {
    log_error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    log_info "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞..."
    
    # Here you can add cleanup logic if needed
    log_warn "–î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: kubectl delete namespace monitoring lab-stands gitops jenkins argocd"
}

# Main function
main() {
    local start_time
    start_time=$(date +%s)
    
    log_info "–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è k8s-lab-baremetal-architecture..."
    log_info "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date)"
    
    # Checks
    check_prerequisites
    check_cluster
    
    # Deploy components
    create_namespaces
    deploy_base_infrastructure
    deploy_monitoring
    deploy_lab_stands
    deploy_security
    deploy_gitops
    deploy_cicd
    
    # Check and report
    check_deployment_status
    create_deployment_report
    
    local end_time
    end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    log_info "–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥"
    log_info "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"
    
    echo -e "\n${GREEN}üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üéâ${NC}"
    echo -e "${BLUE}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.${NC}"
}

# Error handling
trap 'cleanup_on_error; exit 1' ERR

# Interrupt handling
trap 'log_warn "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ..."; exit 1' INT TERM

# Run main function
main "$@" 